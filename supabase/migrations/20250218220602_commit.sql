create extension if not exists "pg_jsonschema" with schema "extensions";

create extension if not exists "postgis" with schema "extensions";


create type "public"."collection_privacy_type" as enum ('PUBLIC', 'FRIENDS_ONLY', 'PRIVATE');

create type "public"."feed_type" as enum ('REVIEW', 'REVIEW_LIKE', 'FOLLOW');

create type "public"."suggestion_type" as enum ('RESERVABLE', 'FREE_WIFI', 'DOG_FRIENDLY', 'KID_FRIENDLY', 'ROOFTOP', 'GARDEN', 'POOL_TABLE', 'DARTS', 'FOOSBALL', 'LIVE_SPORT', 'WHEELCHAIR_ACCESSIBLE');

create sequence "public"."collection_items_count_seq";

create sequence "public"."favourites_count_seq";

create table "public"."beer_pub_relationships" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "beer_id" bigint not null,
    "pub_id" bigint not null
);


alter table "public"."beer_pub_relationships" enable row level security;

create table "public"."beers" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "name" text not null,
    "brewery" text not null,
    "type" text not null,
    "logo" text
);


alter table "public"."beers" enable row level security;

create table "public"."collection_collaborations" (
    "created_at" timestamp with time zone not null default now(),
    "collection_id" bigint not null,
    "user_id" uuid not null
);


alter table "public"."collection_collaborations" enable row level security;

create table "public"."collection_comment_likes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "collection_comment_id" bigint not null,
    "user_id" uuid not null default auth.uid()
);


alter table "public"."collection_comment_likes" enable row level security;

create table "public"."collection_comments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "collection_id" bigint not null,
    "content" text not null
);


alter table "public"."collection_comments" enable row level security;

create table "public"."collection_follows" (
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "collection_id" bigint not null,
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."collection_follows" enable row level security;

create table "public"."collection_items" (
    "id" bigint generated by default as identity not null,
    "pub_id" bigint generated by default as identity not null,
    "collection_id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "order" integer not null default nextval('collection_items_count_seq'::regclass)
);


alter table "public"."collection_items" enable row level security;

create table "public"."collection_likes" (
    "collection_id" bigint not null,
    "user_id" uuid not null default auth.uid(),
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."collection_likes" enable row level security;

create table "public"."collections" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "user_id" uuid not null,
    "collaborative" boolean not null default false,
    "description" text not null default ''::text,
    "updated_at" timestamp with time zone not null default now(),
    "public" collection_privacy_type not null default 'PRIVATE'::collection_privacy_type,
    "ranked" boolean not null default false
);


alter table "public"."collections" enable row level security;

create table "public"."comment_likes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "comment_id" bigint not null,
    "user_id" uuid not null default auth.uid()
);


alter table "public"."comment_likes" enable row level security;

create table "public"."comments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "content" text not null,
    "user_id" uuid not null default auth.uid(),
    "review_id" bigint not null
);


alter table "public"."comments" enable row level security;

create table "public"."favourites" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "pub_id" bigint not null,
    "user_id" uuid not null default auth.uid(),
    "order" integer not null default nextval('favourites_count_seq'::regclass)
);


alter table "public"."favourites" enable row level security;

create table "public"."feed" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "review_id" bigint,
    "review_like_id" bigint,
    "user_id" uuid not null,
    "type" feed_type not null,
    "updated_at" timestamp with time zone not null default now(),
    "follow_id" bigint
);


alter table "public"."feed" enable row level security;

create table "public"."follows" (
    "created_at" timestamp with time zone not null default now(),
    "created_by" uuid not null default auth.uid(),
    "user_id" uuid not null,
    "id" bigint generated by default as identity not null
);


alter table "public"."follows" enable row level security;

create table "public"."opening_hours" (
    "id" bigint generated by default as identity not null,
    "pub_id" bigint not null,
    "open_day" smallint not null,
    "open_hour" text not null,
    "close_day" smallint not null,
    "close_hour" text not null
);


alter table "public"."opening_hours" enable row level security;

create table "public"."pubs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "name" character varying not null,
    "address" character varying not null,
    "phone_number" character varying,
    "google_id" text not null,
    "reservable" boolean,
    "website" text not null,
    "dog_friendly" boolean,
    "live_sport" boolean,
    "beer_garden" boolean,
    "kid_friendly" boolean,
    "free_wifi" boolean,
    "rooftop" boolean,
    "wheelchair_accessible" boolean,
    "hidden" boolean not null default false,
    "location" geography(Point,4326) not null,
    "brewery" boolean default false,
    "dart_board" boolean,
    "foosball_table" boolean,
    "pool_table" boolean,
    "description" text not null,
    "primary_photo" text,
    "photos" text[] not null default '{}'::text[]
);


alter table "public"."pubs" enable row level security;

create table "public"."review_likes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "review_id" bigint not null
);


alter table "public"."review_likes" enable row level security;

create table "public"."reviews" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "pub_id" bigint not null,
    "user_id" uuid not null default auth.uid(),
    "content" text,
    "editors_review" boolean not null default false,
    "beer" boolean,
    "food" boolean,
    "location" boolean,
    "music" boolean,
    "rating" integer not null,
    "service" boolean,
    "vibe" boolean,
    "photos" text[] not null default '{}'::text[]
);


alter table "public"."reviews" enable row level security;

create table "public"."saves" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "pub_id" bigint not null,
    "user_id" uuid not null default auth.uid()
);


alter table "public"."saves" enable row level security;

create table "public"."suggestions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "pub_id" bigint not null,
    "type" suggestion_type not null,
    "value" boolean not null,
    "user_id" uuid not null default auth.uid(),
    "accepted" boolean not null default false
);


alter table "public"."suggestions" enable row level security;

create table "public"."users_public" (
    "id" uuid not null,
    "created_at" timestamp with time zone default now(),
    "name" text not null,
    "username" text not null,
    "bio" text not null default ''::text,
    "location" text not null default ''::text,
    "profile_photo" text not null default ''::text
);


alter table "public"."users_public" enable row level security;

alter sequence "public"."collection_items_count_seq" owned by "public"."collection_items"."order";

alter sequence "public"."favourites_count_seq" owned by "public"."favourites"."order";

CREATE UNIQUE INDEX beers_pkey ON public.beers USING btree (id);

CREATE UNIQUE INDEX collection_collaborations_pkey ON public.collection_collaborations USING btree (collection_id, user_id);

CREATE UNIQUE INDEX collection_comment_likes_pkey ON public.collection_comment_likes USING btree (id);

CREATE UNIQUE INDEX collection_comments_pkey ON public.collection_comments USING btree (id);

CREATE UNIQUE INDEX collection_follows_pkey ON public.collection_follows USING btree (user_id, collection_id);

CREATE UNIQUE INDEX collection_items_pkey ON public.collection_items USING btree (id, pub_id, collection_id);

CREATE UNIQUE INDEX collection_likes_pkey ON public.collection_likes USING btree (collection_id, user_id);

CREATE UNIQUE INDEX collections_pkey ON public.collections USING btree (id);

CREATE UNIQUE INDEX comment_likes_pkey ON public.comment_likes USING btree (id);

CREATE UNIQUE INDEX comment_likes_user_id_comment_id_key ON public.comment_likes USING btree (user_id, comment_id);

CREATE UNIQUE INDEX comments_pkey ON public.comments USING btree (id);

CREATE UNIQUE INDEX draught_association_pkey ON public.beer_pub_relationships USING btree (id);

CREATE UNIQUE INDEX favourites_pkey ON public.favourites USING btree (id, pub_id, user_id);

CREATE UNIQUE INDEX feed_pkey ON public.feed USING btree (id);

CREATE UNIQUE INDEX follows_id_key ON public.follows USING btree (id);

CREATE UNIQUE INDEX follows_pkey ON public.follows USING btree (created_by, user_id, id);

CREATE UNIQUE INDEX "like must be unique to both user_id and review_id" ON public.review_likes USING btree (user_id, review_id);

CREATE UNIQUE INDEX opening_hours_pkey ON public.opening_hours USING btree (id, pub_id);

CREATE INDEX pub_geo_index ON public.pubs USING gist (location);

CREATE UNIQUE INDEX pubs_google_id_key ON public.pubs USING btree (google_id);

CREATE UNIQUE INDEX pubs_pkey ON public.pubs USING btree (id);

CREATE UNIQUE INDEX review_likes_pkey ON public.review_likes USING btree (id);

CREATE UNIQUE INDEX reviews_pkey ON public.reviews USING btree (id);

CREATE UNIQUE INDEX saves_pkey ON public.saves USING btree (id);

CREATE UNIQUE INDEX suggestions_pkey ON public.suggestions USING btree (id, pub_id, user_id);

CREATE UNIQUE INDEX uq_collection_id_order ON public.collection_items USING btree (collection_id, "order");

CREATE UNIQUE INDEX uq_created_by_user_id ON public.follows USING btree (created_by, user_id);

CREATE UNIQUE INDEX uq_favourites_user_id_pub_id ON public.favourites USING btree (pub_id, user_id);

CREATE UNIQUE INDEX uq_pub_id_collection_id ON public.collection_items USING btree (pub_id, collection_id);

CREATE UNIQUE INDEX uq_reviews_pub_id_user_id_key ON public.reviews USING btree (pub_id, user_id);

CREATE UNIQUE INDEX uq_user_id_order ON public.favourites USING btree (user_id, "order");

CREATE UNIQUE INDEX uq_user_id_pub_id ON public.saves USING btree (user_id, pub_id);

CREATE UNIQUE INDEX users_pkey ON public.users_public USING btree (id);

alter table "public"."beer_pub_relationships" add constraint "draught_association_pkey" PRIMARY KEY using index "draught_association_pkey";

alter table "public"."beers" add constraint "beers_pkey" PRIMARY KEY using index "beers_pkey";

alter table "public"."collection_collaborations" add constraint "collection_collaborations_pkey" PRIMARY KEY using index "collection_collaborations_pkey";

alter table "public"."collection_comment_likes" add constraint "collection_comment_likes_pkey" PRIMARY KEY using index "collection_comment_likes_pkey";

alter table "public"."collection_comments" add constraint "collection_comments_pkey" PRIMARY KEY using index "collection_comments_pkey";

alter table "public"."collection_follows" add constraint "collection_follows_pkey" PRIMARY KEY using index "collection_follows_pkey";

alter table "public"."collection_items" add constraint "collection_items_pkey" PRIMARY KEY using index "collection_items_pkey";

alter table "public"."collection_likes" add constraint "collection_likes_pkey" PRIMARY KEY using index "collection_likes_pkey";

alter table "public"."collections" add constraint "collections_pkey" PRIMARY KEY using index "collections_pkey";

alter table "public"."comment_likes" add constraint "comment_likes_pkey" PRIMARY KEY using index "comment_likes_pkey";

alter table "public"."comments" add constraint "comments_pkey" PRIMARY KEY using index "comments_pkey";

alter table "public"."favourites" add constraint "favourites_pkey" PRIMARY KEY using index "favourites_pkey";

alter table "public"."feed" add constraint "feed_pkey" PRIMARY KEY using index "feed_pkey";

alter table "public"."follows" add constraint "follows_pkey" PRIMARY KEY using index "follows_pkey";

alter table "public"."opening_hours" add constraint "opening_hours_pkey" PRIMARY KEY using index "opening_hours_pkey";

alter table "public"."pubs" add constraint "pubs_pkey" PRIMARY KEY using index "pubs_pkey";

alter table "public"."review_likes" add constraint "review_likes_pkey" PRIMARY KEY using index "review_likes_pkey";

alter table "public"."reviews" add constraint "reviews_pkey" PRIMARY KEY using index "reviews_pkey";

alter table "public"."saves" add constraint "saves_pkey" PRIMARY KEY using index "saves_pkey";

alter table "public"."suggestions" add constraint "suggestions_pkey" PRIMARY KEY using index "suggestions_pkey";

alter table "public"."users_public" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."beer_pub_relationships" add constraint "beer_pub_relationships_beer_id_fkey" FOREIGN KEY (beer_id) REFERENCES beers(id) not valid;

alter table "public"."beer_pub_relationships" validate constraint "beer_pub_relationships_beer_id_fkey";

alter table "public"."beer_pub_relationships" add constraint "beer_pub_relationships_pub_id_fkey" FOREIGN KEY (pub_id) REFERENCES pubs(id) not valid;

alter table "public"."beer_pub_relationships" validate constraint "beer_pub_relationships_pub_id_fkey";

alter table "public"."collection_collaborations" add constraint "collection_collaborations_collection_id_fkey" FOREIGN KEY (collection_id) REFERENCES collections(id) ON DELETE CASCADE not valid;

alter table "public"."collection_collaborations" validate constraint "collection_collaborations_collection_id_fkey";

alter table "public"."collection_collaborations" add constraint "collection_collaborations_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."collection_collaborations" validate constraint "collection_collaborations_user_id_fkey";

alter table "public"."collection_comment_likes" add constraint "collection_comment_likes_collection_comment_id_fkey" FOREIGN KEY (collection_comment_id) REFERENCES collection_comments(id) ON DELETE CASCADE not valid;

alter table "public"."collection_comment_likes" validate constraint "collection_comment_likes_collection_comment_id_fkey";

alter table "public"."collection_comment_likes" add constraint "collection_comment_likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."collection_comment_likes" validate constraint "collection_comment_likes_user_id_fkey";

alter table "public"."collection_comments" add constraint "collection_comments_collection_id_fkey" FOREIGN KEY (collection_id) REFERENCES collections(id) ON DELETE CASCADE not valid;

alter table "public"."collection_comments" validate constraint "collection_comments_collection_id_fkey";

alter table "public"."collection_comments" add constraint "collection_comments_content_check" CHECK ((length(content) > 0)) not valid;

alter table "public"."collection_comments" validate constraint "collection_comments_content_check";

alter table "public"."collection_comments" add constraint "collection_comments_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."collection_comments" validate constraint "collection_comments_user_id_fkey";

alter table "public"."collection_follows" add constraint "collection_follows_collection_id_fkey" FOREIGN KEY (collection_id) REFERENCES collections(id) ON DELETE CASCADE not valid;

alter table "public"."collection_follows" validate constraint "collection_follows_collection_id_fkey";

alter table "public"."collection_follows" add constraint "collection_follows_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."collection_follows" validate constraint "collection_follows_user_id_fkey";

alter table "public"."collection_items" add constraint "collection_items_collection_id_fkey" FOREIGN KEY (collection_id) REFERENCES collections(id) ON DELETE CASCADE not valid;

alter table "public"."collection_items" validate constraint "collection_items_collection_id_fkey";

alter table "public"."collection_items" add constraint "collection_items_pub_id_fkey" FOREIGN KEY (pub_id) REFERENCES pubs(id) ON DELETE CASCADE not valid;

alter table "public"."collection_items" validate constraint "collection_items_pub_id_fkey";

alter table "public"."collection_items" add constraint "collection_items_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."collection_items" validate constraint "collection_items_user_id_fkey";

alter table "public"."collection_items" add constraint "uq_collection_id_order" UNIQUE using index "uq_collection_id_order";

alter table "public"."collection_items" add constraint "uq_pub_id_collection_id" UNIQUE using index "uq_pub_id_collection_id";

alter table "public"."collection_likes" add constraint "collection_likes_collection_id_fkey" FOREIGN KEY (collection_id) REFERENCES collections(id) ON DELETE CASCADE not valid;

alter table "public"."collection_likes" validate constraint "collection_likes_collection_id_fkey";

alter table "public"."collection_likes" add constraint "collection_likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."collection_likes" validate constraint "collection_likes_user_id_fkey";

alter table "public"."collections" add constraint "collections_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."collections" validate constraint "collections_user_id_fkey1";

alter table "public"."comment_likes" add constraint "comment_likes_comment_id_fkey" FOREIGN KEY (comment_id) REFERENCES comments(id) ON DELETE CASCADE not valid;

alter table "public"."comment_likes" validate constraint "comment_likes_comment_id_fkey";

alter table "public"."comment_likes" add constraint "comment_likes_user_id_comment_id_key" UNIQUE using index "comment_likes_user_id_comment_id_key";

alter table "public"."comment_likes" add constraint "comment_likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."comment_likes" validate constraint "comment_likes_user_id_fkey";

alter table "public"."comments" add constraint "comments_content_check" CHECK ((length(content) > 0)) not valid;

alter table "public"."comments" validate constraint "comments_content_check";

alter table "public"."comments" add constraint "comments_review_id_fkey" FOREIGN KEY (review_id) REFERENCES reviews(id) ON DELETE CASCADE not valid;

alter table "public"."comments" validate constraint "comments_review_id_fkey";

alter table "public"."comments" add constraint "comments_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."comments" validate constraint "comments_user_id_fkey1";

alter table "public"."favourites" add constraint "ck_limit_three" CHECK ((validate_favourites_limit_three(user_id) = true)) not valid;

alter table "public"."favourites" validate constraint "ck_limit_three";

alter table "public"."favourites" add constraint "favourites_pub_id_fkey" FOREIGN KEY (pub_id) REFERENCES pubs(id) ON DELETE CASCADE not valid;

alter table "public"."favourites" validate constraint "favourites_pub_id_fkey";

alter table "public"."favourites" add constraint "favourites_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."favourites" validate constraint "favourites_user_id_fkey";

alter table "public"."favourites" add constraint "uq_favourites_user_id_pub_id" UNIQUE using index "uq_favourites_user_id_pub_id";

alter table "public"."favourites" add constraint "uq_user_id_order" UNIQUE using index "uq_user_id_order";

alter table "public"."feed" add constraint "feed_follow_id_fkey" FOREIGN KEY (follow_id) REFERENCES follows(id) ON DELETE CASCADE not valid;

alter table "public"."feed" validate constraint "feed_follow_id_fkey";

alter table "public"."feed" add constraint "feed_review_id_fkey" FOREIGN KEY (review_id) REFERENCES reviews(id) ON DELETE CASCADE not valid;

alter table "public"."feed" validate constraint "feed_review_id_fkey";

alter table "public"."feed" add constraint "feed_review_like_id_fkey" FOREIGN KEY (review_like_id) REFERENCES review_likes(id) ON DELETE CASCADE not valid;

alter table "public"."feed" validate constraint "feed_review_like_id_fkey";

alter table "public"."feed" add constraint "feed_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users_public(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."feed" validate constraint "feed_user_id_fkey";

alter table "public"."follows" add constraint "follows_created_by_fkey" FOREIGN KEY (created_by) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."follows" validate constraint "follows_created_by_fkey";

alter table "public"."follows" add constraint "follows_id_key" UNIQUE using index "follows_id_key";

alter table "public"."follows" add constraint "follows_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."follows" validate constraint "follows_user_id_fkey";

alter table "public"."follows" add constraint "uq_created_by_user_id" UNIQUE using index "uq_created_by_user_id";

alter table "public"."opening_hours" add constraint "opening_hours_pub_id_fkey" FOREIGN KEY (pub_id) REFERENCES pubs(id) not valid;

alter table "public"."opening_hours" validate constraint "opening_hours_pub_id_fkey";

alter table "public"."pubs" add constraint "pubs_google_id_key" UNIQUE using index "pubs_google_id_key";

alter table "public"."review_likes" add constraint "like must be unique to both user_id and review_id" UNIQUE using index "like must be unique to both user_id and review_id";

alter table "public"."review_likes" add constraint "review_likes_review_id_fkey" FOREIGN KEY (review_id) REFERENCES reviews(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."review_likes" validate constraint "review_likes_review_id_fkey";

alter table "public"."review_likes" add constraint "review_likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."review_likes" validate constraint "review_likes_user_id_fkey";

alter table "public"."reviews" add constraint "reviews_pub_id_fkey" FOREIGN KEY (pub_id) REFERENCES pubs(id) ON DELETE CASCADE not valid;

alter table "public"."reviews" validate constraint "reviews_pub_id_fkey";

alter table "public"."reviews" add constraint "reviews_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."reviews" validate constraint "reviews_user_id_fkey1";

alter table "public"."reviews" add constraint "uq_reviews_pub_id_user_id_key" UNIQUE using index "uq_reviews_pub_id_user_id_key";

alter table "public"."saves" add constraint "saves_pub_id_fkey" FOREIGN KEY (pub_id) REFERENCES pubs(id) not valid;

alter table "public"."saves" validate constraint "saves_pub_id_fkey";

alter table "public"."saves" add constraint "saves_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."saves" validate constraint "saves_user_id_fkey";

alter table "public"."saves" add constraint "uq_user_id_pub_id" UNIQUE using index "uq_user_id_pub_id";

alter table "public"."suggestions" add constraint "suggestions_pub_id_fkey" FOREIGN KEY (pub_id) REFERENCES pubs(id) ON DELETE CASCADE not valid;

alter table "public"."suggestions" validate constraint "suggestions_pub_id_fkey";

alter table "public"."suggestions" add constraint "suggestions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users_public(id) ON DELETE CASCADE not valid;

alter table "public"."suggestions" validate constraint "suggestions_user_id_fkey";

alter table "public"."users_public" add constraint "users_public_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) not valid;

alter table "public"."users_public" validate constraint "users_public_id_fkey";

alter table "public"."users_public" add constraint "users_public_username_check" CHECK ((length(username) > 2)) not valid;

alter table "public"."users_public" validate constraint "users_public_username_check";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_collection_follow()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  INSERT INTO collection_follows (collection_id, user_id)
	VALUES (NEW.id, NEW.user_id);

  RETURN NEW;
END$function$
;

CREATE OR REPLACE FUNCTION public.create_feed_follow()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
	INSERT INTO feed (user_id, follow_id, type)
	VALUES (NEW.created_by, NEW.id, 'FOLLOW');

	RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.create_feed_review()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
	INSERT INTO feed (user_id, review_id, type)
	VALUES (NEW.user_id, NEW.id, 'REVIEW');

	RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.create_feed_review_like()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
	INSERT INTO feed (user_id, review_like_id, type)
	VALUES (NEW.user_id, NEW.id, 'REVIEW_LIKE');

	RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.create_user(email text, password text)
 RETURNS uuid
 LANGUAGE plpgsql
AS $function$
declare
    user_id uuid;
    encrypted_pw text;
BEGIN
    user_id := gen_random_uuid();
    encrypted_pw := crypt(password, gen_salt('bf'));

    INSERT INTO auth.users
    (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, recovery_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, created_at, updated_at, confirmation_token, email_change, email_change_token_new, recovery_token)
    VALUES
        ('00000000-0000-0000-0000-000000000000', user_id, 'authenticated', 'authenticated', email, encrypted_pw, '2023-05-03 19:41:43.585805+00', '2023-04-22 13:10:03.275387+00', '2023-04-22 13:10:31.458239+00', '{"provider":"email","providers":["email"]}', '{}', '2023-05-03 19:41:43.580424+00', '2023-05-03 19:41:43.585948+00', '', '', '', '');

    INSERT INTO auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at)
    VALUES
        (gen_random_uuid(), user_id, format('{"sub":"%s","email":"%s"}', user_id::text, email)::jsonb, 'email', '2023-05-03 19:41:43.582456+00', '2023-05-03 19:41:43.582497+00', '2023-05-03 19:41:43.582497+00');

    RETURN user_id;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.delete_collaborations_on_collection_update()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN

IF NEW.collaborative = False THEN
	DELETE FROM collection_collaborations
	WHERE collection_id = NEW.id;
END IF;

RETURN NEW;

END$function$
;

CREATE OR REPLACE FUNCTION public.get_pub_list_item(lat double precision, long double precision)
 RETURNS TABLE(id bigint, name character varying, address character varying, saved boolean, rating double precision, num_reviews integer, dist_meters double precision, photos text[], primary_photo text, location text)
 LANGUAGE sql
AS $function$
	select
		pubs.id,
		pubs.name,
		pubs.address,
		count(saves.pub_id = pubs.id AND saves.user_id = auth.uid()) > 0 AS saved,
		COALESCE(avg(reviews.rating)::double precision, 0::double precision) / 2::double precision AS rating,
		count(DISTINCT reviews.*) as num_reviews,
		st_distance(
	        pubs.location,
	        st_point(long, lat) :: geography
	    ) as dist_meters,
		pubs.photos,
		pubs.primary_photo,
		st_asgeojson(pubs.location) AS location
	from public.pubs
	left join saves on pubs.id = saves.pub_id
	left join reviews on pubs.id = reviews.pub_id
	group by pubs.id;
$function$
;

CREATE OR REPLACE FUNCTION public.get_pub_location(pub pubs)
 RETURNS json
 LANGUAGE plpgsql
AS $function$BEGIN
RETURN st_asgeojson(pub.location);
END$function$
;

CREATE OR REPLACE FUNCTION public.get_pub_rating(pub pubs)
 RETURNS double precision
 LANGUAGE plpgsql
AS $function$BEGIN
	RETURN (SELECT (COALESCE(avg(r.rating)::double precision, 0::double precision) / 2::double precision)
	FROM reviews r
WHERE pub.id = r.pub_id);
END$function$
;

CREATE OR REPLACE FUNCTION public.get_pubs_in_polygon(geojson text, dist_long double precision, dist_lat double precision)
 RETURNS TABLE(id integer, name text, address text, primary_photo text, reservable boolean, dog_friendly boolean, live_sport boolean, pool_table boolean, dart_board boolean, beer_garden boolean, kid_friendly boolean, free_wifi boolean, rooftop boolean, foosball_table boolean, wheelchair_accessible boolean, rating double precision, location text, dist_meters double precision, num_reviews integer)
 LANGUAGE sql
AS $function$
SELECT 
	pubs.id,
	pubs.name,
	pubs.address,
	pubs.primary_photo,
	pubs.reservable,
	pubs.dog_friendly,
	pubs.live_sport,
	pubs.pool_table,
	pubs.dart_board,
	pubs.beer_garden,
	pubs.kid_friendly,
	pubs.free_wifi,
	pubs.rooftop,
	pubs.foosball_table,
	pubs.wheelchair_accessible,
	COALESCE(avg(r.rating)::double precision, 0::double precision) / 2::double precision AS rating,
	st_asgeojson(pubs.location) AS location,
	st_distance(
		pubs.location,
		st_point(dist_long, dist_lat) :: geography
	) as dist_meters,
	COUNT(DISTINCT r.*) as num_reviews
FROM pubs
LEFT JOIN reviews r ON pubs.id = r.pub_id
WHERE ST_Within(
	pubs.location::geometry,
	ST_GeomFromGeoJSON(geojson)
)
GROUP BY pubs.id;
$function$
;

CREATE OR REPLACE FUNCTION public.get_pubs_with_distances(order_lat double precision, order_long double precision, dist_lat double precision, dist_long double precision)
 RETURNS TABLE(id integer, name text, address text, phone_number text, website text, primary_photo text, location text, description text, reservable boolean, dog_friendly boolean, live_sport boolean, pool_table boolean, dart_board boolean, beer_garden boolean, kid_friendly boolean, free_wifi boolean, rooftop boolean, foosball_table boolean, wheelchair_accessible boolean, num_reviews integer, saved boolean, dist_meters double precision, rating double precision, photos text[])
 LANGUAGE sql
AS $function$
SELECT
    pubs.id,
    pubs.name,
    pubs.address,
    pubs.phone_number,
    pubs.website,
    pubs.primary_photo,
    st_asgeojson(pubs.location) AS location,
    pubs.description,
    pubs.reservable,
    pubs.dog_friendly,
    pubs.live_sport,
    pubs.pool_table,
    pubs.dart_board,
    pubs.beer_garden,
    pubs.kid_friendly,
    pubs.free_wifi,
    pubs.rooftop,
    pubs.foosball_table,
    pubs.wheelchair_accessible,
    COUNT(DISTINCT r.*) as num_reviews,
    COUNT(s.pub_id = pubs.id AND s.user_id = auth.uid()) > 0 AS saved,
    st_distance(
        pubs.location,
        st_point(dist_long, dist_lat) :: geography
    ) as dist_meters,
    COALESCE(avg(r.rating)::double precision, 0::double precision) / 2::double precision AS rating,
    pubs.photos
FROM pubs
LEFT JOIN saves s ON pubs.id = s.pub_id
LEFT JOIN reviews r ON pubs.id = r.pub_id
GROUP BY pubs.id
ORDER BY
    pubs.location <-> st_point(order_long, order_lat) :: geography;

$function$
;

CREATE OR REPLACE FUNCTION public.is_collaborator(_user_id uuid, _collection_id bigint)
 RETURNS boolean
 LANGUAGE sql
 SECURITY DEFINER
AS $function$SELECT EXISTS (
	SELECT 1
	FROM collection_collaborations
	WHERE user_id = _user_id
	AND collection_id = _collection_id
)$function$
;

CREATE OR REPLACE FUNCTION public.is_friends(_user_one uuid, _user_two uuid)
 RETURNS boolean
 LANGUAGE sql
 SECURITY DEFINER
AS $function$SELECT (
   EXISTS (
      SELECT 1
      FROM follows
      WHERE follows.user_id = _user_one
      AND follows.created_by = _user_two
   )
   AND EXISTS (
      SELECT 1
      FROM follows
      WHERE follows.user_id = _user_two
      AND follows.created_by = _user_one
   )
)$function$
;

CREATE OR REPLACE FUNCTION public.update_collection_deleted_at_on_item_delete()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
UPDATE collections
	SET updated_at = now()
	WHERE collections.id = OLD.collection_id;
	
UPDATE collection_follows
	SET updated_at = now()
	WHERE collection_id = OLD.collection_id;

RETURN NULL;

END;$function$
;

CREATE OR REPLACE FUNCTION public.update_collection_updated_at_on_item_create()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  UPDATE collections
  SET updated_at = now()
  WHERE collections.id = NEW.collection_id;

  UPDATE collection_follows
  SET updated_at = now()
  WHERE collection_id = NEW.collection_id;

  RETURN NEW;
END$function$
;

CREATE OR REPLACE FUNCTION public.update_collection_updated_at_on_update()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
	NEW.updated_at = now();
	RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.update_review_updated_at()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
	-- Update feed updated_at
	UPDATE feed
	SET updated_at = now()
	WHERE type = 'REVIEW'
	AND review_id = NEW.id
	AND user_id = NEW.user_id;

	NEW.updated_at = now();
	RETURN NEW;
END$function$
;

CREATE OR REPLACE FUNCTION public.validate_favourites_limit_three(u_id uuid)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
BEGIN
IF (
	SELECT COUNT(*) 
	FROM public.favourites f 
	WHERE f.user_id = u_id
) >= 3 THEN 
	RETURN False;
END IF;

RETURN True;
END
$function$
;

grant delete on table "public"."beer_pub_relationships" to "anon";

grant insert on table "public"."beer_pub_relationships" to "anon";

grant references on table "public"."beer_pub_relationships" to "anon";

grant select on table "public"."beer_pub_relationships" to "anon";

grant trigger on table "public"."beer_pub_relationships" to "anon";

grant truncate on table "public"."beer_pub_relationships" to "anon";

grant update on table "public"."beer_pub_relationships" to "anon";

grant delete on table "public"."beer_pub_relationships" to "authenticated";

grant insert on table "public"."beer_pub_relationships" to "authenticated";

grant references on table "public"."beer_pub_relationships" to "authenticated";

grant select on table "public"."beer_pub_relationships" to "authenticated";

grant trigger on table "public"."beer_pub_relationships" to "authenticated";

grant truncate on table "public"."beer_pub_relationships" to "authenticated";

grant update on table "public"."beer_pub_relationships" to "authenticated";

grant delete on table "public"."beer_pub_relationships" to "service_role";

grant insert on table "public"."beer_pub_relationships" to "service_role";

grant references on table "public"."beer_pub_relationships" to "service_role";

grant select on table "public"."beer_pub_relationships" to "service_role";

grant trigger on table "public"."beer_pub_relationships" to "service_role";

grant truncate on table "public"."beer_pub_relationships" to "service_role";

grant update on table "public"."beer_pub_relationships" to "service_role";

grant delete on table "public"."beers" to "anon";

grant insert on table "public"."beers" to "anon";

grant references on table "public"."beers" to "anon";

grant select on table "public"."beers" to "anon";

grant trigger on table "public"."beers" to "anon";

grant truncate on table "public"."beers" to "anon";

grant update on table "public"."beers" to "anon";

grant delete on table "public"."beers" to "authenticated";

grant insert on table "public"."beers" to "authenticated";

grant references on table "public"."beers" to "authenticated";

grant select on table "public"."beers" to "authenticated";

grant trigger on table "public"."beers" to "authenticated";

grant truncate on table "public"."beers" to "authenticated";

grant update on table "public"."beers" to "authenticated";

grant delete on table "public"."beers" to "service_role";

grant insert on table "public"."beers" to "service_role";

grant references on table "public"."beers" to "service_role";

grant select on table "public"."beers" to "service_role";

grant trigger on table "public"."beers" to "service_role";

grant truncate on table "public"."beers" to "service_role";

grant update on table "public"."beers" to "service_role";

grant delete on table "public"."collection_collaborations" to "anon";

grant insert on table "public"."collection_collaborations" to "anon";

grant references on table "public"."collection_collaborations" to "anon";

grant select on table "public"."collection_collaborations" to "anon";

grant trigger on table "public"."collection_collaborations" to "anon";

grant truncate on table "public"."collection_collaborations" to "anon";

grant update on table "public"."collection_collaborations" to "anon";

grant delete on table "public"."collection_collaborations" to "authenticated";

grant insert on table "public"."collection_collaborations" to "authenticated";

grant references on table "public"."collection_collaborations" to "authenticated";

grant select on table "public"."collection_collaborations" to "authenticated";

grant trigger on table "public"."collection_collaborations" to "authenticated";

grant truncate on table "public"."collection_collaborations" to "authenticated";

grant update on table "public"."collection_collaborations" to "authenticated";

grant delete on table "public"."collection_collaborations" to "service_role";

grant insert on table "public"."collection_collaborations" to "service_role";

grant references on table "public"."collection_collaborations" to "service_role";

grant select on table "public"."collection_collaborations" to "service_role";

grant trigger on table "public"."collection_collaborations" to "service_role";

grant truncate on table "public"."collection_collaborations" to "service_role";

grant update on table "public"."collection_collaborations" to "service_role";

grant delete on table "public"."collection_comment_likes" to "anon";

grant insert on table "public"."collection_comment_likes" to "anon";

grant references on table "public"."collection_comment_likes" to "anon";

grant select on table "public"."collection_comment_likes" to "anon";

grant trigger on table "public"."collection_comment_likes" to "anon";

grant truncate on table "public"."collection_comment_likes" to "anon";

grant update on table "public"."collection_comment_likes" to "anon";

grant delete on table "public"."collection_comment_likes" to "authenticated";

grant insert on table "public"."collection_comment_likes" to "authenticated";

grant references on table "public"."collection_comment_likes" to "authenticated";

grant select on table "public"."collection_comment_likes" to "authenticated";

grant trigger on table "public"."collection_comment_likes" to "authenticated";

grant truncate on table "public"."collection_comment_likes" to "authenticated";

grant update on table "public"."collection_comment_likes" to "authenticated";

grant delete on table "public"."collection_comment_likes" to "service_role";

grant insert on table "public"."collection_comment_likes" to "service_role";

grant references on table "public"."collection_comment_likes" to "service_role";

grant select on table "public"."collection_comment_likes" to "service_role";

grant trigger on table "public"."collection_comment_likes" to "service_role";

grant truncate on table "public"."collection_comment_likes" to "service_role";

grant update on table "public"."collection_comment_likes" to "service_role";

grant delete on table "public"."collection_comments" to "anon";

grant insert on table "public"."collection_comments" to "anon";

grant references on table "public"."collection_comments" to "anon";

grant select on table "public"."collection_comments" to "anon";

grant trigger on table "public"."collection_comments" to "anon";

grant truncate on table "public"."collection_comments" to "anon";

grant update on table "public"."collection_comments" to "anon";

grant delete on table "public"."collection_comments" to "authenticated";

grant insert on table "public"."collection_comments" to "authenticated";

grant references on table "public"."collection_comments" to "authenticated";

grant select on table "public"."collection_comments" to "authenticated";

grant trigger on table "public"."collection_comments" to "authenticated";

grant truncate on table "public"."collection_comments" to "authenticated";

grant update on table "public"."collection_comments" to "authenticated";

grant delete on table "public"."collection_comments" to "service_role";

grant insert on table "public"."collection_comments" to "service_role";

grant references on table "public"."collection_comments" to "service_role";

grant select on table "public"."collection_comments" to "service_role";

grant trigger on table "public"."collection_comments" to "service_role";

grant truncate on table "public"."collection_comments" to "service_role";

grant update on table "public"."collection_comments" to "service_role";

grant delete on table "public"."collection_follows" to "anon";

grant insert on table "public"."collection_follows" to "anon";

grant references on table "public"."collection_follows" to "anon";

grant select on table "public"."collection_follows" to "anon";

grant trigger on table "public"."collection_follows" to "anon";

grant truncate on table "public"."collection_follows" to "anon";

grant update on table "public"."collection_follows" to "anon";

grant delete on table "public"."collection_follows" to "authenticated";

grant insert on table "public"."collection_follows" to "authenticated";

grant references on table "public"."collection_follows" to "authenticated";

grant select on table "public"."collection_follows" to "authenticated";

grant trigger on table "public"."collection_follows" to "authenticated";

grant truncate on table "public"."collection_follows" to "authenticated";

grant update on table "public"."collection_follows" to "authenticated";

grant delete on table "public"."collection_follows" to "service_role";

grant insert on table "public"."collection_follows" to "service_role";

grant references on table "public"."collection_follows" to "service_role";

grant select on table "public"."collection_follows" to "service_role";

grant trigger on table "public"."collection_follows" to "service_role";

grant truncate on table "public"."collection_follows" to "service_role";

grant update on table "public"."collection_follows" to "service_role";

grant delete on table "public"."collection_items" to "anon";

grant insert on table "public"."collection_items" to "anon";

grant references on table "public"."collection_items" to "anon";

grant select on table "public"."collection_items" to "anon";

grant trigger on table "public"."collection_items" to "anon";

grant truncate on table "public"."collection_items" to "anon";

grant update on table "public"."collection_items" to "anon";

grant delete on table "public"."collection_items" to "authenticated";

grant insert on table "public"."collection_items" to "authenticated";

grant references on table "public"."collection_items" to "authenticated";

grant select on table "public"."collection_items" to "authenticated";

grant trigger on table "public"."collection_items" to "authenticated";

grant truncate on table "public"."collection_items" to "authenticated";

grant update on table "public"."collection_items" to "authenticated";

grant delete on table "public"."collection_items" to "service_role";

grant insert on table "public"."collection_items" to "service_role";

grant references on table "public"."collection_items" to "service_role";

grant select on table "public"."collection_items" to "service_role";

grant trigger on table "public"."collection_items" to "service_role";

grant truncate on table "public"."collection_items" to "service_role";

grant update on table "public"."collection_items" to "service_role";

grant delete on table "public"."collection_likes" to "anon";

grant insert on table "public"."collection_likes" to "anon";

grant references on table "public"."collection_likes" to "anon";

grant select on table "public"."collection_likes" to "anon";

grant trigger on table "public"."collection_likes" to "anon";

grant truncate on table "public"."collection_likes" to "anon";

grant update on table "public"."collection_likes" to "anon";

grant delete on table "public"."collection_likes" to "authenticated";

grant insert on table "public"."collection_likes" to "authenticated";

grant references on table "public"."collection_likes" to "authenticated";

grant select on table "public"."collection_likes" to "authenticated";

grant trigger on table "public"."collection_likes" to "authenticated";

grant truncate on table "public"."collection_likes" to "authenticated";

grant update on table "public"."collection_likes" to "authenticated";

grant delete on table "public"."collection_likes" to "service_role";

grant insert on table "public"."collection_likes" to "service_role";

grant references on table "public"."collection_likes" to "service_role";

grant select on table "public"."collection_likes" to "service_role";

grant trigger on table "public"."collection_likes" to "service_role";

grant truncate on table "public"."collection_likes" to "service_role";

grant update on table "public"."collection_likes" to "service_role";

grant delete on table "public"."collections" to "anon";

grant insert on table "public"."collections" to "anon";

grant references on table "public"."collections" to "anon";

grant select on table "public"."collections" to "anon";

grant trigger on table "public"."collections" to "anon";

grant truncate on table "public"."collections" to "anon";

grant update on table "public"."collections" to "anon";

grant delete on table "public"."collections" to "authenticated";

grant insert on table "public"."collections" to "authenticated";

grant references on table "public"."collections" to "authenticated";

grant select on table "public"."collections" to "authenticated";

grant trigger on table "public"."collections" to "authenticated";

grant truncate on table "public"."collections" to "authenticated";

grant update on table "public"."collections" to "authenticated";

grant delete on table "public"."collections" to "service_role";

grant insert on table "public"."collections" to "service_role";

grant references on table "public"."collections" to "service_role";

grant select on table "public"."collections" to "service_role";

grant trigger on table "public"."collections" to "service_role";

grant truncate on table "public"."collections" to "service_role";

grant update on table "public"."collections" to "service_role";

grant delete on table "public"."comment_likes" to "anon";

grant insert on table "public"."comment_likes" to "anon";

grant references on table "public"."comment_likes" to "anon";

grant select on table "public"."comment_likes" to "anon";

grant trigger on table "public"."comment_likes" to "anon";

grant truncate on table "public"."comment_likes" to "anon";

grant update on table "public"."comment_likes" to "anon";

grant delete on table "public"."comment_likes" to "authenticated";

grant insert on table "public"."comment_likes" to "authenticated";

grant references on table "public"."comment_likes" to "authenticated";

grant select on table "public"."comment_likes" to "authenticated";

grant trigger on table "public"."comment_likes" to "authenticated";

grant truncate on table "public"."comment_likes" to "authenticated";

grant update on table "public"."comment_likes" to "authenticated";

grant delete on table "public"."comment_likes" to "service_role";

grant insert on table "public"."comment_likes" to "service_role";

grant references on table "public"."comment_likes" to "service_role";

grant select on table "public"."comment_likes" to "service_role";

grant trigger on table "public"."comment_likes" to "service_role";

grant truncate on table "public"."comment_likes" to "service_role";

grant update on table "public"."comment_likes" to "service_role";

grant delete on table "public"."comments" to "anon";

grant insert on table "public"."comments" to "anon";

grant references on table "public"."comments" to "anon";

grant select on table "public"."comments" to "anon";

grant trigger on table "public"."comments" to "anon";

grant truncate on table "public"."comments" to "anon";

grant update on table "public"."comments" to "anon";

grant delete on table "public"."comments" to "authenticated";

grant insert on table "public"."comments" to "authenticated";

grant references on table "public"."comments" to "authenticated";

grant select on table "public"."comments" to "authenticated";

grant trigger on table "public"."comments" to "authenticated";

grant truncate on table "public"."comments" to "authenticated";

grant update on table "public"."comments" to "authenticated";

grant delete on table "public"."comments" to "service_role";

grant insert on table "public"."comments" to "service_role";

grant references on table "public"."comments" to "service_role";

grant select on table "public"."comments" to "service_role";

grant trigger on table "public"."comments" to "service_role";

grant truncate on table "public"."comments" to "service_role";

grant update on table "public"."comments" to "service_role";

grant delete on table "public"."favourites" to "anon";

grant insert on table "public"."favourites" to "anon";

grant references on table "public"."favourites" to "anon";

grant select on table "public"."favourites" to "anon";

grant trigger on table "public"."favourites" to "anon";

grant truncate on table "public"."favourites" to "anon";

grant update on table "public"."favourites" to "anon";

grant delete on table "public"."favourites" to "authenticated";

grant insert on table "public"."favourites" to "authenticated";

grant references on table "public"."favourites" to "authenticated";

grant select on table "public"."favourites" to "authenticated";

grant trigger on table "public"."favourites" to "authenticated";

grant truncate on table "public"."favourites" to "authenticated";

grant update on table "public"."favourites" to "authenticated";

grant delete on table "public"."favourites" to "service_role";

grant insert on table "public"."favourites" to "service_role";

grant references on table "public"."favourites" to "service_role";

grant select on table "public"."favourites" to "service_role";

grant trigger on table "public"."favourites" to "service_role";

grant truncate on table "public"."favourites" to "service_role";

grant update on table "public"."favourites" to "service_role";

grant delete on table "public"."feed" to "anon";

grant insert on table "public"."feed" to "anon";

grant references on table "public"."feed" to "anon";

grant select on table "public"."feed" to "anon";

grant trigger on table "public"."feed" to "anon";

grant truncate on table "public"."feed" to "anon";

grant update on table "public"."feed" to "anon";

grant delete on table "public"."feed" to "authenticated";

grant insert on table "public"."feed" to "authenticated";

grant references on table "public"."feed" to "authenticated";

grant select on table "public"."feed" to "authenticated";

grant trigger on table "public"."feed" to "authenticated";

grant truncate on table "public"."feed" to "authenticated";

grant update on table "public"."feed" to "authenticated";

grant delete on table "public"."feed" to "service_role";

grant insert on table "public"."feed" to "service_role";

grant references on table "public"."feed" to "service_role";

grant select on table "public"."feed" to "service_role";

grant trigger on table "public"."feed" to "service_role";

grant truncate on table "public"."feed" to "service_role";

grant update on table "public"."feed" to "service_role";

grant delete on table "public"."follows" to "anon";

grant insert on table "public"."follows" to "anon";

grant references on table "public"."follows" to "anon";

grant select on table "public"."follows" to "anon";

grant trigger on table "public"."follows" to "anon";

grant truncate on table "public"."follows" to "anon";

grant update on table "public"."follows" to "anon";

grant delete on table "public"."follows" to "authenticated";

grant insert on table "public"."follows" to "authenticated";

grant references on table "public"."follows" to "authenticated";

grant select on table "public"."follows" to "authenticated";

grant trigger on table "public"."follows" to "authenticated";

grant truncate on table "public"."follows" to "authenticated";

grant update on table "public"."follows" to "authenticated";

grant delete on table "public"."follows" to "service_role";

grant insert on table "public"."follows" to "service_role";

grant references on table "public"."follows" to "service_role";

grant select on table "public"."follows" to "service_role";

grant trigger on table "public"."follows" to "service_role";

grant truncate on table "public"."follows" to "service_role";

grant update on table "public"."follows" to "service_role";

grant delete on table "public"."opening_hours" to "anon";

grant insert on table "public"."opening_hours" to "anon";

grant references on table "public"."opening_hours" to "anon";

grant select on table "public"."opening_hours" to "anon";

grant trigger on table "public"."opening_hours" to "anon";

grant truncate on table "public"."opening_hours" to "anon";

grant update on table "public"."opening_hours" to "anon";

grant delete on table "public"."opening_hours" to "authenticated";

grant insert on table "public"."opening_hours" to "authenticated";

grant references on table "public"."opening_hours" to "authenticated";

grant select on table "public"."opening_hours" to "authenticated";

grant trigger on table "public"."opening_hours" to "authenticated";

grant truncate on table "public"."opening_hours" to "authenticated";

grant update on table "public"."opening_hours" to "authenticated";

grant delete on table "public"."opening_hours" to "service_role";

grant insert on table "public"."opening_hours" to "service_role";

grant references on table "public"."opening_hours" to "service_role";

grant select on table "public"."opening_hours" to "service_role";

grant trigger on table "public"."opening_hours" to "service_role";

grant truncate on table "public"."opening_hours" to "service_role";

grant update on table "public"."opening_hours" to "service_role";

grant delete on table "public"."pubs" to "anon";

grant insert on table "public"."pubs" to "anon";

grant references on table "public"."pubs" to "anon";

grant select on table "public"."pubs" to "anon";

grant trigger on table "public"."pubs" to "anon";

grant truncate on table "public"."pubs" to "anon";

grant update on table "public"."pubs" to "anon";

grant delete on table "public"."pubs" to "authenticated";

grant insert on table "public"."pubs" to "authenticated";

grant references on table "public"."pubs" to "authenticated";

grant select on table "public"."pubs" to "authenticated";

grant trigger on table "public"."pubs" to "authenticated";

grant truncate on table "public"."pubs" to "authenticated";

grant update on table "public"."pubs" to "authenticated";

grant delete on table "public"."pubs" to "service_role";

grant insert on table "public"."pubs" to "service_role";

grant references on table "public"."pubs" to "service_role";

grant select on table "public"."pubs" to "service_role";

grant trigger on table "public"."pubs" to "service_role";

grant truncate on table "public"."pubs" to "service_role";

grant update on table "public"."pubs" to "service_role";

grant delete on table "public"."review_likes" to "anon";

grant insert on table "public"."review_likes" to "anon";

grant references on table "public"."review_likes" to "anon";

grant select on table "public"."review_likes" to "anon";

grant trigger on table "public"."review_likes" to "anon";

grant truncate on table "public"."review_likes" to "anon";

grant update on table "public"."review_likes" to "anon";

grant delete on table "public"."review_likes" to "authenticated";

grant insert on table "public"."review_likes" to "authenticated";

grant references on table "public"."review_likes" to "authenticated";

grant select on table "public"."review_likes" to "authenticated";

grant trigger on table "public"."review_likes" to "authenticated";

grant truncate on table "public"."review_likes" to "authenticated";

grant update on table "public"."review_likes" to "authenticated";

grant delete on table "public"."review_likes" to "service_role";

grant insert on table "public"."review_likes" to "service_role";

grant references on table "public"."review_likes" to "service_role";

grant select on table "public"."review_likes" to "service_role";

grant trigger on table "public"."review_likes" to "service_role";

grant truncate on table "public"."review_likes" to "service_role";

grant update on table "public"."review_likes" to "service_role";

grant delete on table "public"."reviews" to "anon";

grant insert on table "public"."reviews" to "anon";

grant references on table "public"."reviews" to "anon";

grant select on table "public"."reviews" to "anon";

grant trigger on table "public"."reviews" to "anon";

grant truncate on table "public"."reviews" to "anon";

grant update on table "public"."reviews" to "anon";

grant delete on table "public"."reviews" to "authenticated";

grant insert on table "public"."reviews" to "authenticated";

grant references on table "public"."reviews" to "authenticated";

grant select on table "public"."reviews" to "authenticated";

grant trigger on table "public"."reviews" to "authenticated";

grant truncate on table "public"."reviews" to "authenticated";

grant update on table "public"."reviews" to "authenticated";

grant delete on table "public"."reviews" to "service_role";

grant insert on table "public"."reviews" to "service_role";

grant references on table "public"."reviews" to "service_role";

grant select on table "public"."reviews" to "service_role";

grant trigger on table "public"."reviews" to "service_role";

grant truncate on table "public"."reviews" to "service_role";

grant update on table "public"."reviews" to "service_role";

grant delete on table "public"."saves" to "anon";

grant insert on table "public"."saves" to "anon";

grant references on table "public"."saves" to "anon";

grant select on table "public"."saves" to "anon";

grant trigger on table "public"."saves" to "anon";

grant truncate on table "public"."saves" to "anon";

grant update on table "public"."saves" to "anon";

grant delete on table "public"."saves" to "authenticated";

grant insert on table "public"."saves" to "authenticated";

grant references on table "public"."saves" to "authenticated";

grant select on table "public"."saves" to "authenticated";

grant trigger on table "public"."saves" to "authenticated";

grant truncate on table "public"."saves" to "authenticated";

grant update on table "public"."saves" to "authenticated";

grant delete on table "public"."saves" to "service_role";

grant insert on table "public"."saves" to "service_role";

grant references on table "public"."saves" to "service_role";

grant select on table "public"."saves" to "service_role";

grant trigger on table "public"."saves" to "service_role";

grant truncate on table "public"."saves" to "service_role";

grant update on table "public"."saves" to "service_role";

grant delete on table "public"."suggestions" to "anon";

grant insert on table "public"."suggestions" to "anon";

grant references on table "public"."suggestions" to "anon";

grant select on table "public"."suggestions" to "anon";

grant trigger on table "public"."suggestions" to "anon";

grant truncate on table "public"."suggestions" to "anon";

grant update on table "public"."suggestions" to "anon";

grant delete on table "public"."suggestions" to "authenticated";

grant insert on table "public"."suggestions" to "authenticated";

grant references on table "public"."suggestions" to "authenticated";

grant select on table "public"."suggestions" to "authenticated";

grant trigger on table "public"."suggestions" to "authenticated";

grant truncate on table "public"."suggestions" to "authenticated";

grant update on table "public"."suggestions" to "authenticated";

grant delete on table "public"."suggestions" to "service_role";

grant insert on table "public"."suggestions" to "service_role";

grant references on table "public"."suggestions" to "service_role";

grant select on table "public"."suggestions" to "service_role";

grant trigger on table "public"."suggestions" to "service_role";

grant truncate on table "public"."suggestions" to "service_role";

grant update on table "public"."suggestions" to "service_role";

grant delete on table "public"."users_public" to "anon";

grant insert on table "public"."users_public" to "anon";

grant references on table "public"."users_public" to "anon";

grant select on table "public"."users_public" to "anon";

grant trigger on table "public"."users_public" to "anon";

grant truncate on table "public"."users_public" to "anon";

grant update on table "public"."users_public" to "anon";

grant delete on table "public"."users_public" to "authenticated";

grant insert on table "public"."users_public" to "authenticated";

grant references on table "public"."users_public" to "authenticated";

grant select on table "public"."users_public" to "authenticated";

grant trigger on table "public"."users_public" to "authenticated";

grant truncate on table "public"."users_public" to "authenticated";

grant update on table "public"."users_public" to "authenticated";

grant delete on table "public"."users_public" to "service_role";

grant insert on table "public"."users_public" to "service_role";

grant references on table "public"."users_public" to "service_role";

grant select on table "public"."users_public" to "service_role";

grant trigger on table "public"."users_public" to "service_role";

grant truncate on table "public"."users_public" to "service_role";

grant update on table "public"."users_public" to "service_role";

create policy "any user can view a relationship"
on "public"."beer_pub_relationships"
as permissive
for select
to public
using (true);


create policy "any user can view a pub"
on "public"."beers"
as permissive
for select
to public
using (true);


create policy "users can create collaboration if they are a collaborator"
on "public"."collection_collaborations"
as permissive
for insert
to public
with check (is_collaborator(auth.uid(), collection_id));


create policy "users can create collaboration if they own collection"
on "public"."collection_collaborations"
as permissive
for insert
to public
with check ((auth.uid() IN ( SELECT collections.user_id
   FROM collections
  WHERE (collections.id = collection_collaborations.collection_id))));


create policy "users can delete collaboration if they own collection"
on "public"."collection_collaborations"
as permissive
for delete
to public
using ((auth.uid() IN ( SELECT collections.user_id
   FROM collections
  WHERE (collections.id = collection_collaborations.collection_id))));


create policy "users can view collaborations if they can view collection"
on "public"."collection_collaborations"
as permissive
for select
to public
using ((EXISTS ( SELECT 1
   FROM collections
  WHERE (collection_collaborations.collection_id = collections.id))));


create policy "Users can delete their likes"
on "public"."collection_comment_likes"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "users can create comment based on user_id and if they can view "
on "public"."collection_comment_likes"
as permissive
for insert
to public
with check (((EXISTS ( SELECT 1
   FROM collection_comments
  WHERE (collection_comment_likes.collection_comment_id = collection_comments.id))) AND (auth.uid() = user_id)));


create policy "users can view likes if they can view comment"
on "public"."collection_comment_likes"
as permissive
for select
to public
using ((EXISTS ( SELECT 1
   FROM collection_comments
  WHERE (collection_comment_likes.collection_comment_id = collection_comments.id))));


create policy "users can create comments if they can view collection and is us"
on "public"."collection_comments"
as permissive
for insert
to public
with check (((EXISTS ( SELECT 1
   FROM collections
  WHERE (collection_comments.collection_id = collections.id))) AND (user_id = auth.uid())));


create policy "users can view collection comments if they can view collection"
on "public"."collection_comments"
as permissive
for select
to public
using ((EXISTS ( SELECT 1
   FROM collections
  WHERE (collection_comments.collection_id = collections.id))));


create policy "Enable delete for users based on user_id"
on "public"."collection_follows"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."collection_follows"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "users can view collection follows if they can view collection"
on "public"."collection_follows"
as permissive
for select
to public
using ((EXISTS ( SELECT 1
   FROM collections
  WHERE (collection_follows.collection_id = collections.id))));


create policy "users can delete an item if they are owner of collection"
on "public"."collection_items"
as permissive
for delete
to public
using ((auth.uid() IN ( SELECT collections.user_id
   FROM collections
  WHERE (collections.id = collection_items.collection_id))));


create policy "users can delete item if they are collaborator"
on "public"."collection_items"
as permissive
for delete
to public
using (is_collaborator(auth.uid(), collection_id));


create policy "users can insert item if they are collaborator"
on "public"."collection_items"
as permissive
for insert
to public
with check (((user_id = auth.uid()) AND is_collaborator(auth.uid(), collection_id)));


create policy "users can insert item if they are owner of collection"
on "public"."collection_items"
as permissive
for insert
to public
with check (((user_id = auth.uid()) AND (auth.uid() IN ( SELECT collections.user_id
   FROM collections
  WHERE (collections.id = collection_items.collection_id)))));


create policy "users can view collection items if they can view collection"
on "public"."collection_items"
as permissive
for select
to public
using ((EXISTS ( SELECT 1
   FROM collections
  WHERE (collection_items.collection_id = collections.id))));


create policy "Enable delete for users based on user_id"
on "public"."collection_likes"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."collection_likes"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."collection_likes"
as permissive
for select
to public
using (true);


create policy "users can create their own collections"
on "public"."collections"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "users can delete their own collections"
on "public"."collections"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "users can update their own collections"
on "public"."collections"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "users can view collection if they are collaborator"
on "public"."collections"
as permissive
for select
to public
using (is_collaborator(auth.uid(), id));


create policy "users can view friends collections if FRIENDS_ONLY"
on "public"."collections"
as permissive
for select
to public
using (((public = 'FRIENDS_ONLY'::collection_privacy_type) AND is_friends(auth.uid(), user_id)));


create policy "users can view public collections"
on "public"."collections"
as permissive
for select
to public
using ((public = 'PUBLIC'::collection_privacy_type));


create policy "users can view their own collection"
on "public"."collections"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "all users can pull likes"
on "public"."comment_likes"
as permissive
for select
to public
using (true);


create policy "users can create their own likes"
on "public"."comment_likes"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "users can delete their own likes"
on "public"."comment_likes"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "anyone can see comments"
on "public"."comments"
as permissive
for select
to public
using (true);


create policy "users can create their own comments"
on "public"."comments"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Enable delete for users based on user_id"
on "public"."favourites"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."favourites"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."favourites"
as permissive
for select
to public
using (true);


create policy "Enable insert for users based on user_id"
on "public"."feed"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."feed"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on user_id"
on "public"."feed"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable delete for users based on created_by"
on "public"."follows"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = created_by));


create policy "Enable insert for users based on created_by"
on "public"."follows"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = created_by));


create policy "Enable read access for all users"
on "public"."follows"
as permissive
for select
to public
using (true);


create policy "anyone can view opening hours"
on "public"."opening_hours"
as permissive
for select
to public
using (true);


create policy "anyone can view pubs that aren't hidden"
on "public"."pubs"
as permissive
for select
to public
using ((hidden = false));


create policy "Enable delete for users based on user_id"
on "public"."review_likes"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."review_likes"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "all users can view all likes"
on "public"."review_likes"
as permissive
for select
to public
using (true);


create policy "anyone can read reviews"
on "public"."reviews"
as permissive
for select
to public
using (true);


create policy "authenticated users can create reviews"
on "public"."reviews"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "users can delete their own reviews"
on "public"."reviews"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "users can update their own reviews"
on "public"."reviews"
as permissive
for update
to public
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));


create policy "Enable users to view their own data only"
on "public"."saves"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "user can delete their saves"
on "public"."saves"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "user can save pubs"
on "public"."saves"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Enable insert for users based on user_id"
on "public"."suggestions"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable update for users based on id"
on "public"."users_public"
as permissive
for update
to public
using ((auth.uid() = id))
with check ((auth.uid() = id));


create policy "Users can insert their own row"
on "public"."users_public"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "all can access public data"
on "public"."users_public"
as permissive
for select
to public
using (true);


CREATE TRIGGER update_collection_deleted_at_on_item_delete AFTER DELETE ON public.collection_items FOR EACH ROW EXECUTE FUNCTION update_collection_deleted_at_on_item_delete();

CREATE TRIGGER update_collection_updated_at_on_item_insert AFTER INSERT ON public.collection_items FOR EACH ROW EXECUTE FUNCTION update_collection_updated_at_on_item_create();

CREATE TRIGGER delete_collaborations_on_collection_update AFTER UPDATE ON public.collections FOR EACH ROW EXECUTE FUNCTION delete_collaborations_on_collection_update();

CREATE TRIGGER follow_user_created_collection AFTER INSERT ON public.collections FOR EACH ROW EXECUTE FUNCTION create_collection_follow();

CREATE TRIGGER update_collection_updated_at_on_update AFTER UPDATE ON public.collections FOR EACH ROW EXECUTE FUNCTION update_collection_updated_at_on_update();

CREATE TRIGGER create_feed_follow AFTER INSERT ON public.follows FOR EACH ROW EXECUTE FUNCTION create_feed_follow();

CREATE TRIGGER create_feed_on_create AFTER INSERT ON public.review_likes FOR EACH ROW EXECUTE FUNCTION create_feed_review_like();

CREATE TRIGGER create_feed_review AFTER INSERT ON public.reviews FOR EACH ROW EXECUTE FUNCTION create_feed_review();

CREATE TRIGGER update_review_updated_at_on_update BEFORE UPDATE ON public.reviews FOR EACH ROW EXECUTE FUNCTION update_review_updated_at();



drop policy "users can delete their helpfuls" on "public"."review_helpfuls";

drop policy "users can mark reviews as helpful" on "public"."review_helpfuls";

drop policy "users can pull all helpfuls" on "public"."review_helpfuls";

drop policy "users can update their helpfuls" on "public"."review_helpfuls";

revoke delete on table "public"."review_helpfuls" from "anon";

revoke insert on table "public"."review_helpfuls" from "anon";

revoke references on table "public"."review_helpfuls" from "anon";

revoke select on table "public"."review_helpfuls" from "anon";

revoke trigger on table "public"."review_helpfuls" from "anon";

revoke truncate on table "public"."review_helpfuls" from "anon";

revoke update on table "public"."review_helpfuls" from "anon";

revoke delete on table "public"."review_helpfuls" from "authenticated";

revoke insert on table "public"."review_helpfuls" from "authenticated";

revoke references on table "public"."review_helpfuls" from "authenticated";

revoke select on table "public"."review_helpfuls" from "authenticated";

revoke trigger on table "public"."review_helpfuls" from "authenticated";

revoke truncate on table "public"."review_helpfuls" from "authenticated";

revoke update on table "public"."review_helpfuls" from "authenticated";

revoke delete on table "public"."review_helpfuls" from "service_role";

revoke insert on table "public"."review_helpfuls" from "service_role";

revoke references on table "public"."review_helpfuls" from "service_role";

revoke select on table "public"."review_helpfuls" from "service_role";

revoke trigger on table "public"."review_helpfuls" from "service_role";

revoke truncate on table "public"."review_helpfuls" from "service_role";

revoke update on table "public"."review_helpfuls" from "service_role";

alter table "public"."review_helpfuls" drop constraint "review_helpfuls_review_id_fkey";

alter table "public"."review_helpfuls" drop constraint "review_helpfuls_user_id_fkey";

alter table "public"."review_helpfuls" drop constraint "review_helpfuls_user_id_review_id_key";

drop view if exists "public"."user_reviews";

alter table "public"."review_helpfuls" drop constraint "review_helpfuls_pkey";

drop index if exists "public"."review_helpfuls_pkey";

drop index if exists "public"."review_helpfuls_user_id_review_id_key";

drop table "public"."review_helpfuls";

create table "public"."review_likes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "review_id" bigint not null
);


alter table "public"."review_likes" enable row level security;

CREATE UNIQUE INDEX "like must be unique to both user_id and review_id" ON public.review_likes USING btree (user_id, review_id);

CREATE UNIQUE INDEX review_likes_pkey ON public.review_likes USING btree (id);

alter table "public"."review_likes" add constraint "review_likes_pkey" PRIMARY KEY using index "review_likes_pkey";

alter table "public"."review_likes" add constraint "like must be unique to both user_id and review_id" UNIQUE using index "like must be unique to both user_id and review_id";

alter table "public"."review_likes" add constraint "review_likes_review_id_fkey" FOREIGN KEY (review_id) REFERENCES reviews(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."review_likes" validate constraint "review_likes_review_id_fkey";

alter table "public"."review_likes" add constraint "review_likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."review_likes" validate constraint "review_likes_user_id_fkey";

create or replace view "public"."user_reviews" as  SELECT r.id,
    r.created_at,
    r.updated_at,
    r.pub_id,
    r.user_id,
    r.content,
    r.vibe,
    r.beer,
    r.music,
    r.service,
    r.location,
    r.food,
    r.editors_review,
    u.name AS user_name,
    r.rating,
    u.profile_photo AS user_profile_photo,
    u.username,
    p.name AS pub_name,
    p.primary_photo AS pub_primary_photo,
    p.address AS pub_address,
    count(DISTINCT rl.*) AS likes,
    (sum(
        CASE
            WHEN ((r.id = rl.review_id) AND (rl.user_id = auth.uid())) THEN 1
            ELSE 0
        END) > 0) AS liked
   FROM (((reviews r
     LEFT JOIN users_public u ON ((u.id = r.user_id)))
     LEFT JOIN review_likes rl ON ((rl.review_id = r.id)))
     LEFT JOIN pubs p ON ((p.id = r.pub_id)))
  GROUP BY r.id, u.id, p.id;


grant delete on table "public"."review_likes" to "anon";

grant insert on table "public"."review_likes" to "anon";

grant references on table "public"."review_likes" to "anon";

grant select on table "public"."review_likes" to "anon";

grant trigger on table "public"."review_likes" to "anon";

grant truncate on table "public"."review_likes" to "anon";

grant update on table "public"."review_likes" to "anon";

grant delete on table "public"."review_likes" to "authenticated";

grant insert on table "public"."review_likes" to "authenticated";

grant references on table "public"."review_likes" to "authenticated";

grant select on table "public"."review_likes" to "authenticated";

grant trigger on table "public"."review_likes" to "authenticated";

grant truncate on table "public"."review_likes" to "authenticated";

grant update on table "public"."review_likes" to "authenticated";

grant delete on table "public"."review_likes" to "service_role";

grant insert on table "public"."review_likes" to "service_role";

grant references on table "public"."review_likes" to "service_role";

grant select on table "public"."review_likes" to "service_role";

grant trigger on table "public"."review_likes" to "service_role";

grant truncate on table "public"."review_likes" to "service_role";

grant update on table "public"."review_likes" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."review_likes"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."review_likes"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "all users can view all likes"
on "public"."review_likes"
as permissive
for select
to public
using (true);




create table "public"."beer_pub_relationships" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "beer_id" bigint not null,
    "pub_id" bigint not null
);


alter table "public"."beer_pub_relationships" enable row level security;

alter table "public"."beers" add column "logo" text;

CREATE UNIQUE INDEX draught_association_pkey ON public.beer_pub_relationships USING btree (id);

alter table "public"."beer_pub_relationships" add constraint "draught_association_pkey" PRIMARY KEY using index "draught_association_pkey";

alter table "public"."beer_pub_relationships" add constraint "beer_pub_relationships_beer_id_fkey" FOREIGN KEY (beer_id) REFERENCES beers(id) not valid;

alter table "public"."beer_pub_relationships" validate constraint "beer_pub_relationships_beer_id_fkey";

alter table "public"."beer_pub_relationships" add constraint "beer_pub_relationships_pub_id_fkey" FOREIGN KEY (pub_id) REFERENCES pubs(id) not valid;

alter table "public"."beer_pub_relationships" validate constraint "beer_pub_relationships_pub_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_pub(input_id integer, dist_long double precision, dist_lat double precision)
 RETURNS TABLE(id integer, google_rating real, name text, address text, phone_number text, google_overview text, google_ratings_amount integer, reservable boolean, website text, dog_friendly boolean, live_sport boolean, pool_table boolean, dart_board boolean, beer_garden boolean, kid_friendly boolean, free_wifi boolean, rooftop boolean, foosball_table boolean, wheelchair_accessible boolean, photos text[], opening_hours jsonb, location text, dist_meters double precision, review_vibe double precision, review_beer double precision, review_music double precision, review_service double precision, review_location double precision, review_food double precision, num_reviews integer, saved boolean)
 LANGUAGE sql
AS $function$
select
    p.id,
    p.google_rating,
    p.name,
    p.address,
    p.phone_number,
    p.google_overview,
    p.google_ratings_amount,
    p.reservable,
    p.website,
    p.dog_friendly,
    p.live_sport,
    p.pool_table,
    p.dart_board,
    p.beer_garden,
    p.kid_friendly,
    p.free_wifi,
    p.rooftop,
    p.foosball_table,
    p.wheelchair_accessible,
    array_remove(array_agg(distinct pp.key), NULL) as photos,
    json_agg(distinct oh) as opening_hours,
    st_asgeojson(p.location) as location,
    st_distance(
        p.location,
        st_point(dist_long, dist_lat) :: geography
    ) as dist_meters,
    avg(r.vibe) as review_vibe,
    avg(r.beer) as review_beer,
    avg(r.music) as review_music,
    avg(r.service) as review_service,
    avg(r.location) as review_location,
    avg(r.food) as review_food,
    count(distinct r) as num_reviews,
    count(
        s.pub_id = p.id
        and s.user_id = auth.uid()
    ) > 0 as saved
from
    public.pubs p
    left join public.saves s on p.id = s.pub_id
    left join pub_photos pp on pp.pub_id = p.id
    left join opening_hours oh on p.id = oh.pub_id
    left join public.reviews r on p.id = r.pub_id
where
    p.id = input_id
group by
    p.id $function$
;

create policy "any user can view a relationship"
on "public"."beer_pub_relationships"
as permissive
for select
to public
using (true);


create policy "any user can view a pub"
on "public"."beers"
as permissive
for select
to public
using (true);




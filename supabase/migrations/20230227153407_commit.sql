create extension if not exists "pg_jsonschema" with schema "extensions";


drop policy "Enable photos for all users" on "public"."pub_photos";

drop policy "Enable access for all users" on "public"."pubs";

drop function if exists "public"."nearby_pubs"(order_lat double precision, order_long double precision, dist_lat double precision, dist_long double precision);

drop function if exists "public"."pubs_in_polygon"(geojson text, dist_long double precision, dist_lat double precision);

create table "public"."opening_hours" (
    "id" bigint generated by default as identity not null,
    "pub_id" bigint not null,
    "open_day" smallint not null,
    "open_hour" text not null,
    "close_day" smallint not null,
    "close_hour" text not null
);


alter table "public"."opening_hours" enable row level security;

create table "public"."users" (
    "id" uuid not null,
    "created_at" timestamp with time zone default now(),
    "name" text
);


alter table "public"."users" enable row level security;

alter table "public"."pubs" drop column "opening_hours";

alter table "public"."saves" alter column "user_id" set default auth.uid();

CREATE UNIQUE INDEX opening_hours_pkey ON public.opening_hours USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."opening_hours" add constraint "opening_hours_pkey" PRIMARY KEY using index "opening_hours_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."opening_hours" add constraint "opening_hours_pub_id_fkey" FOREIGN KEY (pub_id) REFERENCES pubs(id) not valid;

alter table "public"."opening_hours" validate constraint "opening_hours_pub_id_fkey";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) not valid;

alter table "public"."users" validate constraint "users_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.saved_pubs(input_id uuid, dist_long double precision, dist_lat double precision)
 RETURNS TABLE(id integer, google_rating real, name text, address text, phone_number text, google_overview text, google_ratings_amount integer, reservable boolean, website text, dog_friendly boolean, live_sport boolean, pool_table_amount smallint, dart_board_amount smallint, menu jsonb, beer_garden boolean, kid_friendly boolean, free_wifi boolean, rooftop boolean, foosball_table_amount smallint, wheelchair_accessible boolean, pub_photos text[], opening_hours json, location text, dist_meters double precision)
 LANGUAGE sql
AS $function$
select p.id,
    p.google_rating,
    p.name,
    p.address,
    p.phone_number,
    p.google_overview,
    p.google_ratings_amount,
    p.reservable,
    p.website,
    p.dog_friendly,
    p.live_sport,
    p.pool_table_amount,
    p.dart_board_amount,
    p.menu,
    p.beer_garden,
    p.kid_friendly,
    p.free_wifi,
    p.rooftop,
    p.foosball_table_amount,
    p.wheelchair_accessible,
    array_agg(distinct pp.key) as pub_photos,
	json_agg(distinct oh) as opening_hours,
    st_asgeojson(p.location) as location,
    st_distance(
        p.location,
        st_point(dist_long, dist_lat)::geography
    ) as dist_meters
from public.pubs p
join public.saves s on p.id = s.pub_id
join users u on u.id = s.user_id
join pub_photos pp on pp.pub_id = p.id
join opening_hours oh on p.id = oh.pub_id
where s.user_id = input_id
group by p.id $function$
;

CREATE OR REPLACE FUNCTION public.nearby_pubs(order_lat double precision, order_long double precision, dist_lat double precision, dist_long double precision)
 RETURNS TABLE(id integer, google_rating real, name text, address text, phone_number text, google_overview text, google_ratings_amount integer, reservable boolean, website text, dog_friendly boolean, live_sport boolean, pool_table_amount smallint, dart_board_amount smallint, menu jsonb, beer_garden boolean, kid_friendly boolean, free_wifi boolean, rooftop boolean, foosball_table_amount smallint, wheelchair_accessible boolean, location text, dist_meters double precision)
 LANGUAGE sql
AS $function$
select id,
    google_rating,
    name,
    address,
    phone_number,
    google_overview,
    google_ratings_amount,
    reservable,
    website,
    dog_friendly,
    live_sport,
    pool_table_amount,
    dart_board_amount,
    menu,
    beer_garden,
    kid_friendly,
    free_wifi,
    rooftop,
    foosball_table_amount,
    wheelchair_accessible,
    st_astext(location) as location,
    st_distance(
        location,
        st_point(dist_long, dist_lat)::geography
    ) as dist_meters
from public.pubs
where hidden = false
order by location <->st_point(order_long, order_lat)::geography;
$function$
;

CREATE OR REPLACE FUNCTION public.pubs_in_polygon(geojson text, dist_long double precision, dist_lat double precision)
 RETURNS TABLE(id integer, google_rating real, name text, address text, phone_number text, google_overview text, google_ratings_amount integer, reservable boolean, website text, dog_friendly boolean, live_sport boolean, pool_table_amount smallint, dart_board_amount smallint, menu jsonb, beer_garden boolean, kid_friendly boolean, free_wifi boolean, rooftop boolean, foosball_table_amount smallint, wheelchair_accessible boolean, location text, dist_meters double precision)
 LANGUAGE sql
AS $function$
select id,
    google_rating,
    name,
    address,
    phone_number,
    google_overview,
    google_ratings_amount,
    reservable,
    website,
    dog_friendly,
    live_sport,
    pool_table_amount,
    dart_board_amount,
    menu,
    beer_garden,
    kid_friendly,
    free_wifi,
    rooftop,
    foosball_table_amount,
    wheelchair_accessible,
    st_astext(location) as location,
    st_distance(
        location,
        st_point(dist_long, dist_lat)::geography
    ) as dist_meters
from public.pubs
where ST_Within(location::geometry, ST_GeomFromGeoJSON(geojson)) $function$
;

create policy "anyone can view opening hours"
on "public"."opening_hours"
as permissive
for select
to public
using (true);


create policy "anyone can view pub photos"
on "public"."pub_photos"
as permissive
for select
to public
using (true);


create policy "anyone can view pubs that aren't hidden"
on "public"."pubs"
as permissive
for select
to public
using ((hidden = false));


create policy "user can delete their saves"
on "public"."saves"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "user can save pubs"
on "public"."saves"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "user can view their saves"
on "public"."saves"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "user can access their own data"
on "public"."users"
as permissive
for select
to public
using ((auth.uid() = id));



